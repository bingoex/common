!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BASE	Makefile	/^BASE = ..\/common\/base$/;"	m
CCrc32	crc32.h	/^    CCrc32() : crc(0) {}$/;"	f	class:platform::commlib::CCrc32
CCrc32	crc32.h	/^class CCrc32$/;"	c	namespace:platform::commlib
CListHead	list.h	/^class CListHead$/;"	c	namespace:common::base
CListObject	list.h	/^		CListObject() {$/;"	f	class:common::base::CListObject
CListObject	list.h	/^class CListObject: public CListHead$/;"	c	namespace:common::base
CMisc	misc.h	/^		class CMisc {$/;"	c	namespace:common::base
CMutex	Lock.h	/^    inline CMutex(void) {$/;"	f	class:CMutex
CMutex	Lock.h	/^class CMutex$/;"	c
COMM	Makefile	/^COMM = ..\/common$/;"	m
CScopedLock	Lock.h	/^    inline CScopedLock(CMutex& mutex) : _mutex(mutex) {$/;"	f	class:CScopedLock
CScopedLock	Lock.h	/^class CScopedLock$/;"	c
CSingleton	coresingleton.h	/^class CSingleton$/;"	c
CSocket	tsocket.h	/^class CSocket$/;"	c	namespace:tbase::tcommu::tsockcommu
CSocketAddr	tsocket.h	/^    CSocketAddr(): _len(sizeof(struct sockaddr_in))$/;"	f	class:tbase::tcommu::tsockcommu::CSocketAddr
CSocketAddr	tsocket.h	/^class CSocketAddr$/;"	c	namespace:tbase::tcommu::tsockcommu
CUR_DIR	Makefile	/^CUR_DIR=$(shell pwd)$/;"	m
C_COMM	Makefile	/^C_COMM = ..\/common\/comm\/src$/;"	m
C_COMM_LIB	Makefile	/^C_COMM_LIB = $(C_COMM)\/cm_lib.a -I$(C_COMM) $/;"	m
Crc32	crc32.cpp	/^uint32_t CCrc32::Crc32(unsigned char *ptr, uint32_t len)$/;"	f	class:CCrc32
Create	coresingleton.h	/^    static T* Create(void) {$/;"	f	struct:CreateUsingNew
CreateByProto	singleton.h	/^		template<class T> class CreateByProto$/;"	c	namespace:common::singleton
CreateNew	singleton.h	/^		template<class T> class CreateNew$/;"	c	namespace:common::singleton
CreateUsingNew	coresingleton.h	/^template <class T> struct CreateUsingNew {$/;"	s
Destroy	coresingleton.h	/^    static void Destroy(T* p) {$/;"	f	struct:CreateUsingNew
Destroy	coresingleton.h	/^void CSingleton<T, CreationPolicy>::Destroy (void)$/;"	f	class:CSingleton
Destroy	singleton.h	/^				static void Destroy() {$/;"	f	class:common::singleton::SingleTon
Destroy	singleton.h	/^				static void Destroy(T *obj) {$/;"	f	class:common::singleton::CreateByProto
Destroy	singleton.h	/^				static void Destroy(T *obj) {$/;"	f	class:common::singleton::CreateNew
Final	crc32.cpp	/^uint32_t CCrc32::Final()$/;"	f	class:CCrc32
FreeList	list.h	/^		void FreeList() {$/;"	f	class:common::base::CListHead
INIT_LIST_HEAD	list.h	23;"	d
INVALID_SOCKET	tsocket.h	22;"	d
InitList	list.h	/^		void InitList() {$/;"	f	class:common::base::CListHead
Instance	coresingleton.h	/^T* CSingleton<T, CreationPolicy>::Instance (void)$/;"	f	class:CSingleton
Instance	singleton.h	/^				static T *Instance() {$/;"	f	class:common::singleton::SingleTon
Instance	singleton.h	/^				static T* Instance(T *proto) {$/;"	f	class:common::singleton::CreateByProto
Instance	singleton.h	/^				static T* Instance(T *proto) {$/;"	f	class:common::singleton::CreateNew
Instance_	singleton.h	/^				static T* Instance_;$/;"	m	class:common::singleton::SingleTon
Instance_	singleton.h	/^			T* SingleTon <T, CreatePolicy >::Instance_ = NULL;$/;"	m	class:common::singleton::SingleTon
LIST_HEAD_INIT	list.h	21;"	d
ListAdd	list.h	/^		void ListAdd(CListHead &n) {$/;"	f	class:common::base::CListHead
ListAdd	list.h	/^		void ListAdd(CListHead *n) {$/;"	f	class:common::base::CListHead
ListAddTail	list.h	/^		void ListAddTail(CListHead &n) {$/;"	f	class:common::base::CListHead
ListAddTail	list.h	/^		void ListAddTail(CListHead *n) {$/;"	f	class:common::base::CListHead
ListDel	list.h	/^		void ListDel() {$/;"	f	class:common::base::CListHead
ListEmpty	list.h	/^		int ListEmpty() const {$/;"	f	class:common::base::CListHead
ListMove	list.h	/^		void ListMove(CListHead &n) {$/;"	f	class:common::base::CListHead
ListMove	list.h	/^		void ListMove(CListHead *n) {$/;"	f	class:common::base::CListHead
ListMoveTail	list.h	/^		void ListMoveTail(CListHead &n) {$/;"	f	class:common::base::CListHead
ListMoveTail	list.h	/^		void ListMoveTail(CListHead *n) {$/;"	f	class:common::base::CListHead
ListNext	list.h	/^		CListHead *ListNext(){$/;"	f	class:common::base::CListHead
ListNext	list.h	/^		CListObject<T> *ListNext() {$/;"	f	class:common::base::CListObject
ListOwner	list.h	/^		T *ListOwner() {$/;"	f	class:common::base::CListObject
ListPrev	list.h	/^		CListHead *ListPrev(){$/;"	f	class:common::base::CListHead
ListPrev	list.h	/^		CListObject<T> *ListPrev() {$/;"	f	class:common::base::CListObject
MAXPATHLEN	misc.h	11;"	d
NextOwner	list.h	/^		T *NextOwner(){$/;"	f	class:common::base::CListObject
OBJ	Makefile	/^OBJ = $(COMM)\/test.o \\$/;"	m
PrevOwner	list.h	/^		T *PrevOwner(){$/;"	f	class:common::base::CListObject
ProtoInstance_	singleton.h	/^				static T* ProtoInstance_;$/;"	m	class:common::singleton::SingleTon
ProtoInstance_	singleton.h	/^			T* SingleTon <T, CreatePolicy >::ProtoInstance_ = NULL;$/;"	m	class:common::singleton::SingleTon
ResetList	list.h	/^		void ResetList() {$/;"	f	class:common::base::CListHead
SetProto	singleton.h	/^				static void SetProto(T *proto) {$/;"	f	class:common::singleton::SingleTon
SingleTon	singleton.h	/^		template< class T, template<class> class CreatePolicy = CreateNew > class SingleTon$/;"	c	namespace:common::singleton
TARGET	Makefile	/^TARGET=libcommon.a$/;"	m
TCP_SOCKET	tsocket.h	19;"	d
UDP_SOCKET	tsocket.h	20;"	d
UNIX_SOCKET	tsocket.h	21;"	d
Update	crc32.cpp	/^int CCrc32::Update(unsigned char *ptr, uint32_t len)$/;"	f	class:CCrc32
_CIPHER_CRC32_H_	crc32.h	2;"	d
_LIST_H_	list.h	2;"	d
_MISC_H_	misc.h	2;"	d
_SINGLE_TON_H_	singleton.h	2;"	d
_TBASE_TSOCKCOMMU_TSOCKET_H_	tsocket.h	2;"	d
__KEY_GEM_H__	keygen.h	2;"	d
__NONCOPYABLE_H__	noncopyable.h	2;"	d
__SINGLETON_H__	coresingleton.h	2;"	d
__TTC_LOCK_H__	Lock.h	2;"	d
__builtin_prefetch	list.h	12;"	d
__list_add	list.h	/^static inline void __list_add(struct list_head *p,$/;"	f	namespace:common::base
__list_del	list.h	/^static inline void __list_del(struct list_head *prev, struct list_head *next)$/;"	f	namespace:common::base
__list_for_each	list.h	161;"	d
__list_for_each_prev	list.h	170;"	d
__list_splice	list.h	/^static inline void __list_splice(struct list_head *list,$/;"	f	namespace:common::base
_addr	tsocket.h	/^    struct sockaddr_in _addr;$/;"	m	class:tbase::tcommu::tsockcommu::CSocketAddr	typeref:struct:tbase::tcommu::tsockcommu::CSocketAddr::sockaddr_in
_instance	coresingleton.h	/^    static T*       _instance;$/;"	m	class:CSingleton
_instance	coresingleton.h	/^T* CSingleton<T, CreationPolicy>::_instance = 0;$/;"	m	class:CSingleton
_len	tsocket.h	/^    socklen_t _len;$/;"	m	class:tbase::tcommu::tsockcommu::CSocketAddr
_mutex	Lock.h	/^    CMutex& _mutex;$/;"	m	class:CScopedLock
_mutex	Lock.h	/^    pthread_mutex_t _mutex;$/;"	m	class:CMutex
_mutex	coresingleton.h	/^    static CMutex   _mutex;$/;"	m	class:CSingleton
_mutex	coresingleton.h	/^CMutex CSingleton<T, CreationPolicy>::_mutex;$/;"	m	class:CSingleton
accept	tsocket.cpp	/^int CSocket::accept(int fd)$/;"	f	class:CSocket
addr	tsocket.h	/^    struct sockaddr * addr()$/;"	f	class:tbase::tcommu::tsockcommu::CSocketAddr
addr_in	tsocket.h	/^    struct sockaddr_in * addr_in()$/;"	f	class:tbase::tcommu::tsockcommu::CSocketAddr
base	list.h	/^	namespace base {$/;"	n	namespace:common
base	misc.h	/^	namespace base $/;"	n	namespace:common
bind	tsocket.cpp	/^int CSocket::bind(int fd, const string &server_address, port_t port)$/;"	f	class:CSocket
bind	tsocket.cpp	/^int CSocket::bind(int fd, const string& path, bool isAbstract)$/;"	f	class:CSocket
bind	tsocket.cpp	/^int CSocket::bind(int fd, ip_4byte_t ip, port_t port)$/;"	f	class:CSocket
bind_any	tsocket.cpp	/^int CSocket::bind_any(int fd, port_t port)$/;"	f	class:CSocket
check_process_exist	misc.cpp	/^int CMisc::check_process_exist(pid_t pid)$/;"	f	class:CMisc
close	tsocket.cpp	/^void CSocket::close(int fd)$/;"	f	class:CSocket
comm	keygen.cpp	/^namespace comm$/;"	n	namespace:spp	file:
comm	keygen.h	/^namespace comm$/;"	n	namespace:spp
commlib	crc32.h	/^namespace commlib$/;"	n	namespace:platform
common	list.h	/^namespace common {$/;"	n
common	misc.h	/^namespace common$/;"	n
common	singleton.h	/^namespace common {$/;"	n
connect	tsocket.cpp	/^int CSocket::connect(int fd, const string& address, port_t port)$/;"	f	class:CSocket
connect	tsocket.cpp	/^int CSocket::connect(int fd, const string& path)$/;"	f	class:CSocket
connect	tsocket.cpp	/^int CSocket::connect(int fd, ip_4byte_t address, port_t port)$/;"	f	class:CSocket
crc	crc32.h	/^    uint32_t crc;$/;"	m	class:platform::commlib::CCrc32
crc_table	crc32.cpp	/^static const uint32_t crc_table[256] =$/;"	v	file:
create	tsocket.cpp	/^int CSocket::create(int sock_type)$/;"	f	class:CSocket
family_t	tsocket.h	/^typedef sa_family_t family_t;$/;"	t	namespace:tbase::tcommu::tsockcommu
get_family	tsocket.h	/^    family_t get_family()$/;"	f	class:tbase::tcommu::tsockcommu::CSocketAddr
get_numeric_ipv4	tsocket.h	/^    ip_4byte_t get_numeric_ipv4()$/;"	f	class:tbase::tcommu::tsockcommu::CSocketAddr
get_peer_name	tsocket.cpp	/^int CSocket::get_peer_name(int fd, ip_4byte_t& peer_address, port_t& peer_port)$/;"	f	class:CSocket
get_peer_name	tsocket.cpp	/^int CSocket::get_peer_name(int fd, string & peer_address, port_t & peer_port)$/;"	f	class:CSocket
get_port	tsocket.h	/^    port_t get_port()$/;"	f	class:tbase::tcommu::tsockcommu::CSocketAddr
get_sock_name	tsocket.cpp	/^int CSocket::get_sock_name(int fd, ip_4byte_t& socket_address, port_t & socket_port)$/;"	f	class:CSocket
get_sock_name	tsocket.cpp	/^int CSocket::get_sock_name(int fd, string & socket_address, port_t & socket_port)$/;"	f	class:CSocket
getip	misc.cpp	/^unsigned CMisc::getip(const char *ifname) $/;"	f	class:CMisc
in_n2s	tsocket.cpp	/^string CSocketAddr::in_n2s(ip_4byte_t addr)$/;"	f	class:CSocketAddr
in_s2n	tsocket.cpp	/^int CSocketAddr::in_s2n(const string& addr, ip_4byte_t& addr_4byte)$/;"	f	class:CSocketAddr
ip_4byte_t	tsocket.h	/^typedef in_addr_t ip_4byte_t;	\/\/	unsigned int$/;"	t	namespace:tbase::tcommu::tsockcommu
length	tsocket.h	/^    socklen_t& length()$/;"	f	class:tbase::tcommu::tsockcommu::CSocketAddr
list_add	list.h	/^static inline void list_add(struct list_head *p, struct list_head *head)$/;"	f	namespace:common::base
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *p, struct list_head *head)$/;"	f	namespace:common::base
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f	namespace:common::base
list_del_init	list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f	namespace:common::base
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f	namespace:common::base
list_entry	list.h	148;"	d
list_for_each	list.h	156;"	d
list_for_each_entry	list.h	181;"	d
list_for_each_prev	list.h	165;"	d
list_head	list.h	/^struct list_head{$/;"	s	namespace:common::base
list_head_t	list.h	/^typedef struct list_head list_head_t;$/;"	t	namespace:common::base	typeref:struct:common::base::list_head
list_move	list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f	namespace:common::base
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list, struct list_head *head)$/;"	f	namespace:common::base
list_splice	list.h	/^static inline void list_splice(struct list_head *list, struct list_head *head)$/;"	f	namespace:common::base
list_splice_init	list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f	namespace:common::base
listen	tsocket.cpp	/^int CSocket::listen(int fd, int backlog)$/;"	f	class:CSocket
lock	Lock.h	/^    inline void lock(void) {$/;"	f	class:CMutex
main	test.cpp	/^int main() $/;"	f
next	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:common::base::list_head	typeref:struct:common::base::list_head::list_head
noncopyable	noncopyable.h	/^    noncopyable(void) {$/;"	f	class:noncopyable
noncopyable	noncopyable.h	/^class noncopyable$/;"	c
objlist	list.h	/^		struct list_head objlist;$/;"	m	class:common::base::CListHead	typeref:struct:common::base::CListHead::list_head
offsetof	list.h	133;"	d
offsetof	list.h	135;"	d
platform	crc32.h	/^namespace platform$/;"	n
port_t	tsocket.h	/^typedef uint16_t port_t;		\/\/	unsigned short$/;"	t	namespace:tbase::tcommu::tsockcommu
prev	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:common::base::list_head	typeref:struct:common::base::list_head::
pwdtok	keygen.cpp	/^key_t pwdtok(int id)$/;"	f	namespace:spp::comm
realloc_safe	misc.h	/^				static inline void * realloc_safe(void *ptr, size_t size)$/;"	f	class:common::base::CMisc
receive	tsocket.cpp	/^int CSocket::receive(int fd, void *buf, unsigned buf_size, unsigned& received_len, int flag \/* = 0 *\/)$/;"	f	class:CSocket
receive	tsocket.cpp	/^int CSocket::receive(int fd, void* buf, unsigned buf_size, unsigned& received_len, CSocketAddr& addr)$/;"	f	class:CSocket
send	tsocket.cpp	/^int CSocket::send(int fd, const void *buf, unsigned buf_size, unsigned& sent_len, CSocketAddr& addr)$/;"	f	class:CSocket
send	tsocket.cpp	/^int CSocket::send(int fd, const void *buf, unsigned buf_size, unsigned& sent_len, int flag \/* = 0 *\/)$/;"	f	class:CSocket
set_family	tsocket.h	/^    void set_family(family_t f)$/;"	f	class:tbase::tcommu::tsockcommu::CSocketAddr
set_nonblock	tsocket.cpp	/^int CSocket::set_nonblock(int fd)$/;"	f	class:CSocket
set_numeric_ipv4	tsocket.h	/^    void set_numeric_ipv4(ip_4byte_t ip)$/;"	f	class:tbase::tcommu::tsockcommu::CSocketAddr
set_port	tsocket.h	/^    void set_port(port_t port)$/;"	f	class:tbase::tcommu::tsockcommu::CSocketAddr
set_recvbuf	tsocket.cpp	/^int CSocket::set_recvbuf(int fd, int sz)$/;"	f	class:CSocket
set_reuseaddr	tsocket.cpp	/^int CSocket::set_reuseaddr(int fd)$/;"	f	class:CSocket
set_timeout	tsocket.cpp	/^void CSocket::set_timeout(int fd, int ms)$/;"	f	class:CSocket
shutdown	tsocket.cpp	/^int CSocket::shutdown(int fd)$/;"	f	class:CSocket
singleton	singleton.h	/^	namespace singleton {$/;"	n	namespace:common
spp	keygen.cpp	/^namespace spp$/;"	n	file:
spp	keygen.h	/^namespace spp$/;"	n
tbase	tsocket.h	/^namespace tbase$/;"	n
tcommu	tsocket.h	/^namespace tcommu$/;"	n	namespace:tbase
time_diff	misc.h	/^				static inline int64_t time_diff(const struct timeval &tv1, const struct timeval &tv2) $/;"	f	class:common::base::CMisc
tsockcommu	tsocket.h	/^namespace tsockcommu$/;"	n	namespace:tbase::tcommu
unlock	Lock.h	/^    inline void unlock(void) {$/;"	f	class:CMutex
~CListObject	list.h	/^		~CListObject() {$/;"	f	class:common::base::CListObject
~CMutex	Lock.h	/^    inline ~CMutex(void) {$/;"	f	class:CMutex
~CScopedLock	Lock.h	/^    inline ~CScopedLock(void) {$/;"	f	class:CScopedLock
~noncopyable	noncopyable.h	/^    ~noncopyable(void) {$/;"	f	class:noncopyable
